version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatbot_postgres
    environment:
      POSTGRES_DB: chatbot_db
      POSTGRES_USER: chatbot
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot -d chatbot_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - chatbot_network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatbot_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chatbot_network

  # MCP Server
  mcp_server:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    container_name: chatbot_mcp_server
    volumes:
      - ./mcp_server/resources:/app/resources:ro
      - ./mcp_server/prompts:/app/prompts:ro
    restart: unless-stopped
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot_backend
    environment:
      DATABASE_URL: postgresql://chatbot:password@postgres:5432/chatbot_db
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MCP_SERVER_URL: http://mcp_server:8001
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mcp_server:
        condition: service_started
    restart: unless-stopped
    networks:
      - chatbot_network
    volumes:
      - ./backend/app:/app/app:ro

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatbot_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chatbot_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  chatbot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16